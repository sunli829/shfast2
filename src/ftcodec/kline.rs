// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `kline.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct KLine {
    // message fields
    pub timestamp: ::protobuf::SingularPtrField<super::common::DateTime>,
    pub fields: ::protobuf::SingularPtrField<super::common::Fields>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KLine {
    fn default() -> &'a KLine {
        <KLine as ::protobuf::Message>::default_instance()
    }
}

impl KLine {
    pub fn new() -> KLine {
        ::std::default::Default::default()
    }

    // .ftcodec.DateTime timestamp = 1;


    pub fn get_timestamp(&self) -> &super::common::DateTime {
        self.timestamp.as_ref().unwrap_or_else(|| super::common::DateTime::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: super::common::DateTime) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut super::common::DateTime {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> super::common::DateTime {
        self.timestamp.take().unwrap_or_else(|| super::common::DateTime::new())
    }

    // .ftcodec.Fields fields = 2;


    pub fn get_fields(&self) -> &super::common::Fields {
        self.fields.as_ref().unwrap_or_else(|| super::common::Fields::default_instance())
    }
    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    pub fn has_fields(&self) -> bool {
        self.fields.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: super::common::Fields) {
        self.fields = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fields(&mut self) -> &mut super::common::Fields {
        if self.fields.is_none() {
            self.fields.set_default();
        }
        self.fields.as_mut().unwrap()
    }

    // Take field
    pub fn take_fields(&mut self) -> super::common::Fields {
        self.fields.take().unwrap_or_else(|| super::common::Fields::new())
    }
}

impl ::protobuf::Message for KLine {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.fields {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.fields.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.fields.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KLine {
        KLine::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::DateTime>>(
                    "timestamp",
                    |m: &KLine| { &m.timestamp },
                    |m: &mut KLine| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Fields>>(
                    "fields",
                    |m: &KLine| { &m.fields },
                    |m: &mut KLine| { &mut m.fields },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<KLine>(
                    "KLine",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static KLine {
        static mut instance: ::protobuf::lazy::Lazy<KLine> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const KLine,
        };
        unsafe {
            instance.get(KLine::new)
        }
    }
}

impl ::protobuf::Clear for KLine {
    fn clear(&mut self) {
        self.timestamp.clear();
        self.fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KLine {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KLine {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum KLine_Field {
    PRICE = 0,
    VOLUME = 1,
    AMOUNT = 2,
    PRE_CLOSE_PRICE = 3,
    OPEN_PRICE = 4,
    HIGH_PRICE = 5,
    LOW_PRICE = 6,
    CLOSE_PRICE = 7,
    IOPV = 8,
    PRE_IOPV = 9,
    SETTLEMENT = 10,
    PRE_SETTLEMENT = 11,
}

impl ::protobuf::ProtobufEnum for KLine_Field {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KLine_Field> {
        match value {
            0 => ::std::option::Option::Some(KLine_Field::PRICE),
            1 => ::std::option::Option::Some(KLine_Field::VOLUME),
            2 => ::std::option::Option::Some(KLine_Field::AMOUNT),
            3 => ::std::option::Option::Some(KLine_Field::PRE_CLOSE_PRICE),
            4 => ::std::option::Option::Some(KLine_Field::OPEN_PRICE),
            5 => ::std::option::Option::Some(KLine_Field::HIGH_PRICE),
            6 => ::std::option::Option::Some(KLine_Field::LOW_PRICE),
            7 => ::std::option::Option::Some(KLine_Field::CLOSE_PRICE),
            8 => ::std::option::Option::Some(KLine_Field::IOPV),
            9 => ::std::option::Option::Some(KLine_Field::PRE_IOPV),
            10 => ::std::option::Option::Some(KLine_Field::SETTLEMENT),
            11 => ::std::option::Option::Some(KLine_Field::PRE_SETTLEMENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [KLine_Field] = &[
            KLine_Field::PRICE,
            KLine_Field::VOLUME,
            KLine_Field::AMOUNT,
            KLine_Field::PRE_CLOSE_PRICE,
            KLine_Field::OPEN_PRICE,
            KLine_Field::HIGH_PRICE,
            KLine_Field::LOW_PRICE,
            KLine_Field::CLOSE_PRICE,
            KLine_Field::IOPV,
            KLine_Field::PRE_IOPV,
            KLine_Field::SETTLEMENT,
            KLine_Field::PRE_SETTLEMENT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("KLine_Field", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for KLine_Field {
}

impl ::std::default::Default for KLine_Field {
    fn default() -> Self {
        KLine_Field::PRICE
    }
}

impl ::protobuf::reflect::ProtobufValue for KLine_Field {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bkline.proto\x12\x07ftcodec\x1a\x0ccommon.proto\"\x9f\x02\n\x05KLin\
    e\x12/\n\ttimestamp\x18\x01\x20\x01(\x0b2\x11.ftcodec.DateTimeR\ttimesta\
    mp\x12'\n\x06fields\x18\x02\x20\x01(\x0b2\x0f.ftcodec.FieldsR\x06fields\
    \"\xbb\x01\n\x05Field\x12\t\n\x05PRICE\x10\0\x12\n\n\x06VOLUME\x10\x01\
    \x12\n\n\x06AMOUNT\x10\x02\x12\x13\n\x0fPRE_CLOSE_PRICE\x10\x03\x12\x0e\
    \n\nOPEN_PRICE\x10\x04\x12\x0e\n\nHIGH_PRICE\x10\x05\x12\r\n\tLOW_PRICE\
    \x10\x06\x12\x0f\n\x0bCLOSE_PRICE\x10\x07\x12\x08\n\x04IOPV\x10\x08\x12\
    \x0c\n\x08PRE_IOPV\x10\t\x12\x0e\n\nSETTLEMENT\x10\n\x12\x12\n\x0ePRE_SE\
    TTLEMENT\x10\x0bb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
